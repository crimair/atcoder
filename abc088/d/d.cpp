#include <bits/stdc++.h>

using namespace std;

// string msg = R"(
// 3 3
// ..#
// #..
// ...
// )";

string msg = R"(
50 74
..........................................................................
...#...####...####..###...###...###.....#...####...####..###...###...###..
..#.#..#...#.##....#...#.#...#.#...#...#.#..#...#.##....#...#.#...#.#...#.
..#.#..#...#.#.....#...#.#...#.#...#...#.#..#...#.#.....#...#.#...#.#...#.
.#...#.#..##.#.....#...#.#.###.#.###..#...#.#..##.#.....#...#.#.###.#.###.
.#####.####..#.....#...#..##....##....#####.####..#.....#...#..##....##...
.#...#.#...#.#.....#...#.#...#.#...#..#...#.#...#.#.....#...#.#...#.#...#.
.#...#.#...#.##....#...#.#...#.#...#..#...#.#...#.##....#...#.#...#.#...#.
.#...#.####...####..###...###...###...#...#.####...####..###...###...###..
..........................................................................
..........................................................................
...#...####...####..###...###...###.....#...####...####..###...###...###..
..#.#..#...#.##....#...#.#...#.#...#...#.#..#...#.##....#...#.#...#.#...#.
..#.#..#...#.#.....#...#.#...#.#...#...#.#..#...#.#.....#...#.#...#.#...#.
.#...#.#..##.#.....#...#.#.###.#.###..#...#.#..##.#.....#...#.#.###.#.###.
.#####.####..#.....#...#..##....##....#####.####..#.....#...#..##....##...
.#...#.#...#.#.....#...#.#...#.#...#..#...#.#...#.#.....#...#.#...#.#...#.
.#...#.#...#.##....#...#.#...#.#...#..#...#.#...#.##....#...#.#...#.#...#.
.#...#.####...####..###...###...###...#...#.####...####..###...###...###..
..........................................................................
..........................................................................
...#...####...####..###...###...###.....#...####...####..###...###...###..
..#.#..#...#.##....#...#.#...#.#...#...#.#..#...#.##....#...#.#...#.#...#.
..#.#..#...#.#.....#...#.#...#.#...#...#.#..#...#.#.....#...#.#...#.#...#.
.#...#.#..##.#.....#...#.#.###.#.###..#...#.#..##.#.....#...#.#.###.#.###.
.#####.####..#.....#...#..##....##....#####.####..#.....#...#..##....##...
.#...#.#...#.#.....#...#.#...#.#...#..#...#.#...#.#.....#...#.#...#.#...#.
.#...#.#...#.##....#...#.#...#.#...#..#...#.#...#.##....#...#.#...#.#...#.
.#...#.####...####..###...###...###...#...#.####...####..###...###...###..
..........................................................................
..........................................................................
...#...####...####..###...###...###.....#...####...####..###...###...###..
..#.#..#...#.##....#...#.#...#.#...#...#.#..#...#.##....#...#.#...#.#...#.
..#.#..#...#.#.....#...#.#...#.#...#...#.#..#...#.#.....#...#.#...#.#...#.
.#...#.#..##.#.....#...#.#.###.#.###..#...#.#..##.#.....#...#.#.###.#.###.
.#####.####..#.....#...#..##....##....#####.####..#.....#...#..##....##...
.#...#.#...#.#.....#...#.#...#.#...#..#...#.#...#.#.....#...#.#...#.#...#.
.#...#.#...#.##....#...#.#...#.#...#..#...#.#...#.##....#...#.#...#.#...#.
.#...#.####...####..###...###...###...#...#.####...####..###...###...###..
..........................................................................
..........................................................................
...#...####...####..###...###...###.....#...####...####..###...###...###..
..#.#..#...#.##....#...#.#...#.#...#...#.#..#...#.##....#...#.#...#.#...#.
..#.#..#...#.#.....#...#.#...#.#...#...#.#..#...#.#.....#...#.#...#.#...#.
.#...#.#..##.#.....#...#.#.###.#.###..#...#.#..##.#.....#...#.#.###.#.###.
.#####.####..#.....#...#..##....##....#####.####..#.....#...#..##....##...
.#...#.#...#.#.....#...#.#...#.#...#..#...#.#...#.#.....#...#.#...#.#...#.
.#...#.#...#.##....#...#.#...#.#...#..#...#.#...#.##....#...#.#...#.#...#.
.#...#.####...####..###...###...###...#...#.####...####..###...###...###..
..........................................................................
)";

void localout() {
  ofstream out("input.txt");
  out << msg.substr(1, -1);
}

/**************************************************************/

#include <bits/stdc++.h>
using namespace std;

int grid_repainting(int h, int w, int* m) {
  struct point_t {
    int y;
    int x;
  };
  vector<point_t> openlist;
  vector<point_t> closelist;
  vector<point_t> tmplist;

  point_t pos;
  pos.y = 0;
  pos.x = 0;

  point_t goal;
  goal.y = h - 1;
  goal.x = w - 1;

  int cost = 0;
  openlist.push_back(pos);
  cost = 1;

  int white_cost = 0;
  for (int i = 0; i < h * w; i++) {
    white_cost += m[i] == 0 ? 1 : 0;
  }

  int dx[] = {0, 1, 0, -1};
  int dy[] = {1, 0, -1, 0};
  while (true) {
    tmplist.clear();
    // 到達不可能
    if (openlist.size() == 0) {
      return -1;
    }

    for (auto cpos : openlist) {
      if (cpos.x == goal.x && cpos.y == goal.y) {
        return white_cost - cost;
      }
      //通れるか
      if (m[cpos.y * w + cpos.x] == 0) {
        //未チェックかどうか
        bool nocheck = true;
        for (auto p : closelist) {
          if (p.x == cpos.x && p.y == cpos.y) {
            nocheck = false;
            break;
          }
        }

        if (nocheck) {
          closelist.push_back(cpos);

          point_t npos;
          for (int i = 0; i < 4; i++) {
            npos.x = cpos.x + dx[i];
            npos.y = cpos.y + dy[i];
            //移動先が範囲内
            if ((0 <= npos.x && npos.x < w) && (0 <= npos.y && npos.y < h)) {
              tmplist.push_back(npos);
            }
          }
        }
      }
    }

    openlist.clear();
    for (auto p : tmplist) {
      openlist.push_back(p);
    }
    cost += 1;
  }
  return white_cost - cost;
}

int main() {
#ifdef LOCAL_DEBUG
  localout();
  ifstream in("input.txt");
  cin.rdbuf(in.rdbuf());
#endif
  int h, w;
  cin >> h >> w;
  int m[h][w];
  for (int j = 0; j < h; j++) {
    for (int i = 0; i < w; i++) {
      char c;
      cin >> c;
      m[j][i] = c == '#' ? 1 : 0;
    }
  }
  cout << grid_repainting(h, w, &m[0][0]) << endl;

  return 0;
}
